/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coodinzcore;

import java.sql.Connection;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author FUNAPOYO_SISTEMAS
 */
public final class MainView extends javax.swing.JFrame {

    private final SConnection sConnection = new SConnection();
    private final FConnection fConnection = new FConnection();
    private Connection zcoreConnection = null;
    private Connection coodinConnection = null;
    private Boolean zcoreConnected = false;
    private Boolean coodinConnected = false;

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
        checkConnection();
        processData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historial = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        zcoreEstado = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        coodinEstado = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        edCodigo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Coodin vs ZCore");

        jLabel1.setText("Estado de Conexión con ZCore Database:");

        jLabel2.setText("Estado de Conexión con Coodin Database:");

        historial.setColumns(20);
        historial.setLineWrap(true);
        historial.setRows(5);
        jScrollPane1.setViewportView(historial);

        jButton1.setText("Cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        zcoreEstado.setColumns(20);
        zcoreEstado.setRows(2);
        jScrollPane2.setViewportView(zcoreEstado);

        coodinEstado.setColumns(20);
        coodinEstado.setRows(2);
        jScrollPane3.setViewportView(coodinEstado);

        jLabel3.setText("Historial");

        edCodigo.setText("12345678");

        jLabel4.setText("Código de Coodin: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 433, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(edCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         System.exit(1);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea coodinEstado;
    private javax.swing.JTextField edCodigo;
    private javax.swing.JTextArea historial;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea zcoreEstado;
    // End of variables declaration//GEN-END:variables

    private void checkConnection() {
        TimerTask timerTask = new TimerTask() 
        { 
           @Override
           public void run() {
                try {
                    if (zcoreConnection != null) {
                        if (zcoreConnection.isValid(60)) {
                            zcoreEstado.setText("Conectado...");
                            zcoreConnected = true;
                        } else {
                            zcoreEstado.setText("Desconectado...");
                            zcoreConnected = false;
                        }
                    } else {
                        zcoreConnection = sConnection.getConnection(zcoreEstado);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    if (coodinConnection != null) {
                        if (coodinConnection.isValid(60)) {
                            coodinEstado.setText("Conectado...");
                            coodinConnected = true;
                        } else {
                            coodinEstado.setText("Desconectado...");
                            coodinConnected = false;
                        }
                    } else {
                        coodinConnection = fConnection.getConnection(coodinEstado);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
              // Aquí se pone en marcha el timer cada segundo. 
        Timer timer = new Timer(); 
        // Dentro de 0 milisegundos avísame cada 1000 milisegundos 
        timer.scheduleAtFixedRate(timerTask, 0, 60000);
    }
    
    private void escribirHistorial(String registro) {
        Date fecha = new Date();
        String texto = fecha.toString() + " : " + registro + "\n";
        historial.append(texto);
    }

    private void processData() {
        TimerTask timerTask2; 
        timerTask2 = new TimerTask() 
        {
            @Override
            public void run() {
                if (zcoreConnected && coodinConnected) {
                    try {
                        // primer paso leer coodin
                        // leer ENVIAR_CLIENTE
                        escribirHistorial("Procesando ENVIAR_CLIENTE...");
                        String enviar_cliente_leer = "SELECT * FROM ENVIAR_CLIENTE WHERE ES_LEIDO = 0";
                        PreparedStatement str = coodinConnection.prepareStatement(enviar_cliente_leer);
                        ResultSet rs = str.executeQuery();
                        while (rs.next()) {
                            String lote = rs.getString("LOTE"); // 1
                            Integer consecutivo = rs.getInt("CONSECUTIVO"); // 2
                            String operacion = rs.getString("OPERACION"); // 3
                            Integer documento = rs.getInt("DOCUMENTO"); // 4
                            String documento_tipo = rs.getString("DOCUMENTO_TIPO"); // 5
                            String documento_fecha = rs.getString("DOCUMENTO_FECHA"); // 6
                            String nombre_1 = rs.getString("NOMBRE_1"); // 7
                            String nombre_2 = rs.getString("NOMBRE_2"); // 8
                            String apellido_1 = rs.getString("APELLIDO_1"); // 9
                            String apellido_2 = rs.getString("APELLIDO_2"); // 10
                            String fecha_nacimiento = rs.getString("FECHA_NACIMIENTO"); // 11
                            String sexo = rs.getString("SEXO"); // 12
                            String direccion = rs.getString("DIRECCION"); //13
                            String telefono = rs.getString("TELEFONO"); // 14
                            String celular = rs.getString("CELULAR"); // 15
                            String correo = rs.getString("CORREO"); // 16
                            String pais = rs.getString("PAIS"); // 17
                            String depto = rs.getString("DEPTO"); // 18
                            String ciudad = rs.getString("CIUDAD"); // 19
                            String pais_residencia = rs.getString("PAIS_RESIDENCIA"); // 20
                            String depto_residencia = rs.getString("DEPTO_RESIDENCIA"); // 21
                            String ciudad_residencia = rs.getString("CIUDAD_RESIDENCIA"); // 22
                            String usuario = rs.getString("USUARIO"); // 23
                            String otra01 = rs.getString("OTRA01"); // 24
                            String empresa = rs.getString("EMPRESA"); // 25
                            String cargo = rs.getString("CARGO"); // 26
                            String ocupacion = rs.getString("OCUPACION"); // 27
                            String admin_rec_public = rs.getString("ADMIN_REC_PUBLIC"); // 28
                            String act_economica = rs.getString("ACT_ECONOMICA"); // 29
                            String observaciones = rs.getString("OBSERVACIONES"); // 30
                            Integer ingresos_mensuales = rs.getInt("INGRESOS_MENSUALES"); // 31
                            Integer otros_ingresos = rs.getInt("OTROS_INGRESOS"); // 32
                            Integer egresos_mensuales = rs.getInt("EGRESOS_MENSUALES"); // 33
                            Integer total_activos = rs.getInt("TOTAL_ACTIVOS"); // 34
                            Integer total_pasivos = rs.getInt("TOTAL_PASIVOS"); // 35
                            String sms = rs.getString("SMS"); // 36
                            String otp = rs.getString("OTP"); // 37
                            Timestamp fecha_transaccion = rs.getTimestamp("FECHA_TRANSACCION"); // 38
                            String empleado_entidad = rs.getString("EMPLEADO_ENTIDAD"); // 39
                            String t_input = rs.getString("T_INPUT"); // 40
                            String estado = rs.getString("ESTADO"); // 41
                            String id_entidad = rs.getString("ID_ENTIDAD"); // 42
                            
                            // Insertar datos en base zcore
                            
                            String enviar_cliente_escribir = "INSERT INTO ENVIAR_CLIENTE ("
                                    + "LOTE, CONSECUTIVO, OPERACION, DOCUMENTO, "
                                    + "DOCUMENTO_TIPO, DOCUMENTO_FECHA, NOMBRE_1, NOMBRE_2, APELLIDO_1, APELLIDO_2, "
                                    + "FECHA_NACIMIENTO, SEXO, DIRECCION, TELEFONO, CELULAR, CORREO, PAIS, DEPTO,"
                                    + "CIUDAD, PAIS_RESIDENCIA, DEPTO_RESIDENCIA, CIUDAD_RESIDENCIA, USUARIO, OTRA01, EMPRESA,"
                                    + "CARGO, OCUPACION, ADMIN_REC_PUBLIC, ACT_ECONOMICA, OBSERVACIONES, INGRESOS_MENSUALES, OTROS_INGRESOS"
                                    + "EGRESOS_MENSUALES, TOTAL_ACTIVOS, TOTAL_PASIVOS, SMS, OPT, T_INPUT, ESTADO, ID_ENTIDAD, FECHA_TRANSACCION, EMPLEADO_ENTIDAD"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement ste = zcoreConnection.prepareStatement(enviar_cliente_escribir);
                            ste.setString(0, lote); // 1
                            ste.setInt(1, consecutivo); // 2
                            ste.setString(2, operacion); // 3
                            ste.setInt(3, documento); // 4
                            ste.setString(4, documento_tipo); // 5
                            ste.setString(5, documento_fecha); // 6
                            ste.setString(6, nombre_1); // 7
                            ste.setString(7, nombre_2); // 8
                            ste.setString(8, apellido_1); // 9
                            ste.setString(9, apellido_2); // 10
                            ste.setString(10, fecha_nacimiento); // 11
                            ste.setString(11, sexo); // 12
                            ste.setString(12, direccion); // 13
                            ste.setString(13, telefono); // 14
                            ste.setString(14, celular); // 15
                            ste.setString(15, correo); // 16
                            ste.setString(16, pais); // 17
                            ste.setString(17, depto); // 18
                            ste.setString(18, ciudad); // 19
                            ste.setString(19, pais_residencia); // 20
                            ste.setString(20, depto_residencia); // 21
                            ste.setString(21, ciudad_residencia); // 22
                            ste.setString(22, usuario); // 23
                            ste.setString(23, otra01); // 24
                            ste.setString(24, empresa); // 25
                            ste.setString(25, cargo); // 26
                            ste.setString(26, ocupacion); // 27
                            ste.setString(27, admin_rec_public); // 28
                            ste.setString(28, act_economica); // 29
                            ste.setString(29, observaciones); // 30
                            ste.setInt(30, ingresos_mensuales); // 31
                            ste.setInt(31, otros_ingresos); // 32
                            ste.setInt(32, egresos_mensuales); // 33
                            ste.setInt(31, total_activos); // 34
                            ste.setInt(32, total_pasivos); // 35
                            ste.setString(33, sms); // 36
                            ste.setString(34, otp); // 37
                            ste.setString(35, t_input); // 38
                            ste.setString(36, estado); // 39
                            ste.setString(37, id_entidad); // 40
                            ste.setTimestamp(35, fecha_transaccion); // 41
                            ste.setString(36, empleado_entidad); // 42
                            ste.executeUpdate();
                            
                            String actualizar_estado = "UPDATE ENVIAR_CLIENTE SET ES_LEIDO = 1 WHERE LOTE = ? AND CONSECUTIVO = ?";
                            PreparedStatement stu = coodinConnection.prepareStatement(actualizar_estado);
                            stu.setString(0, lote);
                            stu.setInt(1, consecutivo);
                            stu.executeUpdate();
                        }
                        // LEER ENVIAR CUENTA
                        escribirHistorial("Procesando ENVIAR_CUENTA...");
                        String enviar_cuenta_leer = "SELECT * FROM ENVIAR_CUENTA WHERE ES_LEIDO = 0";
                        PreparedStatement secl = coodinConnection.prepareStatement(enviar_cuenta_leer);
                        rs = secl.executeQuery();
                        while (rs.next()) {
                            String lote = rs.getString("LOTE"); // 1
                            Integer consecutivo = rs.getInt("CONSECUTIVO"); // 2
                            String operacion = rs.getString("OPERACION"); // 3
                            Integer documento = rs.getInt("DOCUMENTO"); // 4
                            String cuenta = rs.getString("CUENTA"); // 5
                            String tipo = rs.getString("TIPO"); // 6
                            String tipo_ahorro = rs.getString("TIPO_AHORRO"); // 7
                            String cuenta_ppal = rs.getString("CUENTA_PPAL"); // 8
                            String estado_cuenta = rs.getString("ESTADO_CUENTA"); // 9
                            Integer saldo_total = rs.getInt("SALDO_TOTAL"); // 10
                            Integer saldo_disponible = rs.getInt("SALDO_DISPONIBLE"); // 11
                            String pago_fecha = rs.getString("PAGO_FECHA"); // 12
                            Integer pago_min = rs.getInt("PAGO_MIN"); // 13
                            Integer pago_max = rs.getInt("PAGO_MAX"); // 14
                            String pago_referencia = rs.getString("PAGO_REFERENCIA"); // 15
                            String pago_mensaje = rs.getString("PAGO_MENSAJE"); // 16
                            String fecha_apertura_cliente = rs.getString("FECHA_APERTURA_CLIENTE"); // 17
                            String categoria_gmf = rs.getString("CATEGORIA_GMF"); // 18
                            Integer saldo_acumulado = rs.getInt("SALDO_ACUMULADO"); // 19
                            String usuario = rs.getString("USUARIO"); // 20
                            Timestamp fecha_transaccion = rs.getTimestamp("FECHA_TRANSACCION"); // 21
                            String t_input = rs.getString("T_INPUT"); // 22
                            String estado = rs.getString("ESTADO"); // 23
                            String id_entidad = rs.getString("ID_ENTIDAD"); // 24
                            // Insertar datos en base zcore
                            
                            String enviar_cuenta_escribir = "INSERT INTO ENVIAR_CUENTA ("
                                    + "LOTE, CONSECUTIVO, OPERACION, DOCUMENTO, CUENTA, TIPO, TIPO_AHORRO, CUENTA_PPAL, ESTADO_CUENTA,"
                                    + "SALDO_TOTAL, SALDO_DISPONIBLE, PAGO_FECHA, PAGO_MIN, PAGO_MAX, PAGO_REFERENCIA,"
                                    + "PAGO_MENSAJE, FECHA_APERTURA_CUENTA, CATEGORIA_GMF, SALDO_ACUMULADO, USUARIO, FECHA_TRANSACCION,"
                                    + "T_INPUT, ESTADO, ID_ENTIDAD"
                                    + ")"
                                    + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement sece = zcoreConnection.prepareStatement(enviar_cuenta_escribir);
                            sece.setString(0, lote);
                            sece.setInt(1, consecutivo);
                            sece.setString(2, operacion);
                            sece.setInt(3, documento);
                            sece.setString(4, cuenta);
                            sece.setString(5, tipo);
                            sece.setString(6, tipo_ahorro);
                            sece.setString(7, cuenta_ppal);
                            sece.setString(8, estado_cuenta);
                            sece.setInt(9, saldo_total);
                            sece.setInt(10, saldo_disponible);
                            sece.setString(11, pago_fecha);
                            sece.setInt(12, pago_min);
                            sece.setInt(13, pago_max);
                            sece.setString(14, pago_referencia);
                            sece.setString(15, pago_mensaje);
                            sece.setString(16, fecha_apertura_cliente);
                            sece.setString(17, categoria_gmf);
                            sece.setInt(18, saldo_acumulado);
                            sece.setString(19, usuario);
                            sece.setTimestamp(20, fecha_transaccion);
                            sece.setString(21, t_input);
                            sece.setString(22, estado);
                            sece.setString(23, id_entidad);
                            sece.executeUpdate();
                            
                            String actualizar_estado = "UPDATE ENVIAR_CUENTA SET ES_LEIDO = 1 WHERE LOTE = ? AND CONSECUTIVO = ?";
                            PreparedStatement secu = coodinConnection.prepareStatement(actualizar_estado);
                            secu.setString(0, lote);
                            secu.setInt(1, consecutivo);
                            secu.executeUpdate();
                        }
                        
                        // LEER ENVIAR CUPOS CANAL
                        escribirHistorial("Procesando ENVIAR_CUPOS_CANAL...");
                        String enviar_cupos_canal_leer = "SELECT * FROM ENVIAR_CUPOS_CANAL WHERE ES_LEIDO = 0";
                        PreparedStatement seccl = coodinConnection.prepareStatement(enviar_cupos_canal_leer);
                        rs = seccl.executeQuery();
                        while (rs.next()) {
                            String lote = rs.getString("LOTE"); // 1
                            Integer consecutivo = rs.getInt("CONSECUTIVO"); // 2
                            String operacion = rs.getString("OPERACION"); // 3
                            Integer documento = rs.getInt("DOCUMENTO"); // 4
                            String cuenta = rs.getString("CUENTA"); // 5
                            String canal = rs.getString("CANAL"); // 6
                            Integer nope = rs.getInt("NOPE"); // 7
                            Integer monto = rs.getInt("MONTO"); // 8
                            String usuario = rs.getString("USUARIO"); // 9
                            Timestamp fecha_transaccion = rs.getTimestamp("FECHA_TRANSACCION"); // 10
                            String tipo = rs.getString("TIPO"); // 11
                            String t_input = rs.getString("T_INPUT"); // 12
                            String estado = rs.getString("ESTADO"); // 13
                            String id_entidad = rs.getString("ID_ENTIDAD"); // 14
                            
                            String enviar_cupos_canal_escribir = "INSERT INTO ENVIAR_CUPOS_CANAL ("
                                    + "LOTE, CONSECUTIVO, OPERACION, DOCUMENTO, CUENTA, CANAL, NOPE, MONTO,"
                                    + "USUARIO, FECHA_TRANSACCION, TIPO, T_INPUT, ESTADO, ID_ENTIDAD"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement secce = zcoreConnection.prepareStatement(enviar_cupos_canal_escribir);
                            secce.setString(0, lote);
                            secce.setInt(1, consecutivo);
                            secce.setString(2, operacion);
                            secce.setInt(3, documento);
                            secce.setString(4, cuenta);
                            secce.setString(5, canal);
                            secce.setInt(6, nope);
                            secce.setInt(7, monto);
                            secce.setString(8, usuario);
                            secce.setTimestamp(9, fecha_transaccion);
                            secce.setString(10, tipo);
                            secce.setString(11, t_input);
                            secce.setString(12, estado);
                            secce.setString(13, id_entidad);
                            secce.executeUpdate();
                            
                            String actualizar_estado = "UPDATE ENVIAR_CUPOS_CANAL SET ES_LEIDO = 1 WHERE LOTE = ? AND CONSECUTIVO = ?";
                            PreparedStatement secc = coodinConnection.prepareStatement(actualizar_estado);
                            secc.setString(0, lote);
                            secc.setInt(1, consecutivo);
                            secc.executeUpdate();
                        }
                        
                        // LEER ENVIAR TARJETA
                        escribirHistorial("Procesando ENVIAR_TARJETA...");
                        String enviar_tarjeta_leer = "SELECT * FROM ENVIAR_TARJETA WHERE ES_LEIDO = 0";
                        PreparedStatement setl = coodinConnection.prepareStatement(enviar_tarjeta_leer);
                        rs = setl.executeQuery();
                        while (rs.next()) {
                            String lote = rs.getString("LOTE"); // 1
                            Integer consecutivo = rs.getInt("CONSECUTIVO"); // 2
                            String operacion = rs.getString("OPERACION"); // 3
                            Integer documento = rs.getInt("DOCUMENTO"); // 4
                            String tarjeta = rs.getString("TARJETA"); // 5
                            String usuario = rs.getString("USUARIO"); // 6
                            Timestamp fecha_transaccion = rs.getTimestamp("FECHA_TRANSACCION"); // 7
                            String t_input = rs.getString("T_INPUT"); // 8
                            String estado = rs.getString("ESTADO"); // 9
                            String id_entidad = rs.getString("ID_ENTIDAD"); // 10
                            
                            String enviar_tarjeta_escribir = "INSERT INTO ENVIAR_TARJETA ("
                                    + "LOTE, CONSECUTIVO, OPERACION, DOCUMENTO, TARJETA,"
                                    + "USUARIO, FECHA_TRANSACCION, T_INPUT, ESTADO, ID_ENTIDAD"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement sete = zcoreConnection.prepareStatement(enviar_tarjeta_escribir);
                            sete.setString(0, lote);
                            sete.setInt(1, consecutivo);
                            sete.setString(2, operacion);
                            sete.setInt(3, documento);
                            sete.setString(4, tarjeta);
                            sete.setString(5, usuario);
                            sete.setTimestamp(6, fecha_transaccion);
                            sete.setString(7, t_input);
                            sete.setString(8, estado);
                            sete.setString(9, id_entidad);
                            sete.executeUpdate();

                            String actualizar_estado = "UPDATE ENVIAR_TARJETA SET ES_LEIDO = 1 WHERE LOTE = ? AND CONSECUTIVO = ?";
                            PreparedStatement seta = coodinConnection.prepareStatement(actualizar_estado);
                            seta.setString(0, lote);
                            seta.setInt(1, consecutivo);
                            seta.executeUpdate();
                        }
                        
                        // LEER ENVIAR TARJETA CUENTA
                        escribirHistorial("Procesando ENVIAR_TARJETA_CUENTA...");
                        String enviar_tarjeta_cuenta_leer = "SELECT * FROM ENVIAR_TARJETA_CUENTA WHERE ES_LEIDO = 0";
                        PreparedStatement setcl = coodinConnection.prepareStatement(enviar_tarjeta_cuenta_leer);
                        rs = setcl.executeQuery();
                        while (rs.next()) {
                            String lote = rs.getString("LOTE"); // 1
                            Integer consecutivo = rs.getInt("CONSECUTIVO"); // 2
                            String operacion = rs.getString("OPERACION"); // 3
                            Integer documento = rs.getInt("DOCUMENTO"); // 4
                            String cuenta = rs.getString("CUENTA"); // 5
                            String tipo = rs.getString("TIPO"); // 6
                            String tarjeta = rs.getString("TARJETA"); // 7
                            String usuario = rs.getString("USUARIO"); // 8
                            Timestamp fecha_transaccion = rs.getTimestamp("FECHA_TRANSACCION"); // 9
                            String t_input = rs.getString("T_INPUT"); // 10
                            String estado = rs.getString("ESTADO"); // 11
                            String id_entidad = rs.getString("ID_ENTIDAD"); // 12
                            
                            String enviar_tarjeta_cuenta_escribir = "INSERT INTO ENVIAR_TARJETA_CUENTA ("
                                    + "LOTE, CONSECUTIVO, OPERACION, DOCUMENTO, CUENTA, TIPO, TARJETA, USUARIO,"
                                    + "FECHA_TRANSACCION, T_INPUT, ESTADO, ID_ENTIDAD"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement setce = zcoreConnection.prepareStatement(enviar_tarjeta_cuenta_escribir);
                            setce.setString(0, lote);
                            setce.setInt(1, consecutivo);
                            setce.setString(2, operacion);
                            setce.setInt(3, documento);
                            setce.setString(4, cuenta);
                            setce.setString(5, tipo);
                            setce.setString(6, tarjeta);
                            setce.setString(7, usuario);
                            setce.setTimestamp(8, fecha_transaccion);
                            setce.setString(9, t_input);
                            setce.setString(10, estado);
                            setce.setString(11, id_entidad);
                            setce.executeUpdate();

                            String actualizar_estado = "UPDATE ENVIAR_TARJETA_CUENTA SET ES_LEIDO = 1 WHERE LOTE = ? AND CONSECUTIVO = ?";
                            PreparedStatement seta = coodinConnection.prepareStatement(actualizar_estado);
                            seta.setString(0, lote);
                            seta.setInt(1, consecutivo);
                            seta.executeUpdate();
                        }
                        // LEER ENVIAR_FINANCIERA
                        escribirHistorial("Procesando ENVIAR_FINANCIERA...");
                        String enviar_financiera_leer = "SELECT * FROM ENVIAR_FINANCIERA WHERE ES_LEIDO = 0";
                        PreparedStatement sefl = coodinConnection.prepareStatement(enviar_financiera_leer);
                        rs = sefl.executeQuery();
                        while (rs.next()) {
                          String lote = rs.getString("LOTE"); // 1
                          Integer consecutivo = rs.getInt("CONSECUTIVO"); // 2
                          String operacion = rs.getString("OPERACION"); // 3
                          Integer documento = rs.getInt("DOCUMENTO"); // 4
                          String cuenta = rs.getString("CUENTA"); // 5
                          String tipo = rs.getString("TIPO"); // 6
                          String tipo_ah = rs.getString("TIPO_AH"); // 7
                          Integer valor = rs.getInt("VALOR"); // 8
                          String referencia = rs.getString("REFERENCIA"); // 9
                          String usuario = rs.getString("USUARIO"); // 10
                          String aplicar_gmf = rs.getString("APLICAR_GMF"); // 11
                          String aplicar_acumulado = rs.getString("APLICAR_ACUMULADO"); // 12
                          Date fecha_transaccion = rs.getDate("FECHA_TRANSACCION"); // 13
                          String t_input = rs.getString("T_INPUT"); // 14
                          String estado = rs.getString("ESTADO"); // 15
                          String id_entidad = rs.getString("ID_ENTIDAD"); // 16
                          
                          String enviar_financiera_escribir = "INSERT INTO ENVIAR_FINANCIERA ("
                                  + "LOTE, CONSECUTIVO, OPERACION, DOCUMENTO, CUENTA, TIPO, TIPO_AH, VALOR, REFERENCIA, "
                                  + "USUARIO, APLICAR_GMF, APLICAR_ACUMULADO, FECHA_TRANSACCION, T_INPUT, ESTADO, ID_ENTIDAD"
                                  +") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                          PreparedStatement sefe = zcoreConnection.prepareStatement(enviar_financiera_escribir);
                          sefe.setString( 0, lote);
                          sefe.setInt   ( 1, consecutivo);
                          sefe.setString( 2, operacion);
                          sefe.setInt   ( 3, documento);
                          sefe.setString( 4, cuenta);
                          sefe.setString( 5, tipo);
                          sefe.setString( 6, tipo_ah);
                          sefe.setInt   ( 7, valor);
                          sefe.setString( 8, referencia);
                          sefe.setString( 9, usuario);
                          sefe.setString(10, aplicar_gmf);
                          sefe.setString(11, aplicar_acumulado);
                          sefe.setTimestamp(12, new java.sql.Timestamp(fecha_transaccion.getTime()));
                          sefe.setString(13, t_input);
                          sefe.setString(14, estado);
                          sefe.setString(15, id_entidad);
                          sefe.executeUpdate();
                          
                          String enviar_financiera_actualizar = "UPDATE ENVIAR_FINANCIERA SET ES_LEIDO = 1 WHERE LOTE = ? AND CONSECUTIVO = ?";
                          PreparedStatement sefa = coodinConnection.prepareStatement(enviar_financiera_actualizar);
                          sefa.setString(0, lote);
                          sefa.setInt   (1, consecutivo);
                          sefa.executeUpdate();
                        }
                        
                        //*****************************
                        // segundo paso leer zcore   //
                        //*****************************
                        // 1  recibir  
                        escribirHistorial("Procesando RECIBIR...");
                        String recibir_leer = "SELECT * FROM RECIBIR";
                        PreparedStatement slr = zcoreConnection.prepareStatement(recibir_leer);
                        rs = slr.executeQuery();
                        while (rs.next()) {
                            String id = rs.getString("ID"); // 1
                            String fecha_registro = rs.getString("FECHA_REGISTRO"); // 2
                            String hora_registro = rs.getString("HORA_REGISTRO"); // 3
                            String fecha = rs.getString("FECHA"); // 4
                            String hora = rs.getString("HORA"); // 5
                            String fecha_contable = rs.getString("FECHA_CONTABLE"); // 6
                            String operacion = rs.getString("OPERACION"); // 7
                            String descripcion = rs.getString("DESCRIPCION"); // 8
                            String secuencia = rs.getString("SECUENCIA"); // 9
                            String documento = rs.getString("DOCUMENTO"); // 10
                            String cuenta = rs.getString("CUENTA"); // 11
                            String tipo = rs.getString("TIPO"); // 12
                            String tipo_ah = rs.getString("TIPO_AH"); // 13
                            String canal = rs.getString("CANAL"); // 14
                            String terminal = rs.getString("TERMINAL"); // 15
                            String dispositivo = rs.getString("DISPOSITIVO"); // 16
                            String usuario = rs.getString("USUARIO"); // 17
                            Integer valor = rs.getInt("VALOR"); // 18
                            Integer valor_comision = rs.getInt("VALOR_COMISION"); // 19
                            Integer valor_gmf = rs.getInt("VALOR_GMF"); // 20
                            String cheque_codigo = rs.getString("CHEQUE_CODIGO"); // 21
                            String cheque_cuenta = rs.getString("CHEQUE_CUENTA"); // 22
                            String cheque_numero = rs.getString("CHEQUE_NUMERO"); // 23
                            String reverso = rs.getString("REVERSO"); // 24
                            String estado = rs.getString("ESTADO"); // 25
                            String error = rs.getString("ERROR"); // 26
                            String terminal_pais = rs.getString("TERMINAL_PAIS"); // 27
                            String terminal_departamento = rs.getString("TERMINAL_DEPARTAMENTO"); // 28
                            String terminal_ciudad = rs.getString("TERMINAL_CIUDAD"); // 29
                            String origen = rs.getString("ORIGEN"); // 30
                            String tipo_terminal = rs.getString("TIPO_TERMINAL"); // 31
                            String descripcion_recaudo = rs.getString("DESCRIPCION_RECAUDO"); // 32
                            String nombre_comercio = rs.getString("NOMBRE_COMERCIO"); // 33
                            String pse_referencia_1 = rs.getString("PSE_REFERENCIA_1"); // 34
                            String pse_referencia_2 = rs.getString("PSE_REFERENCIA_2"); // 35
                            
                            String recibir_escribir = "INSERT INTO RECIBIR ("
                                    + "ID, FECHA_REGISTRO, HORA_REGISTRO, FECHA, HORA, FECHA_CONTABLE,"
                                    + "OPERACION, DESCRIPCION, SECUENCIA, DOCUMENTO, CUENTA, TIPO, TIPO_AH, CANAL"
                                    + "TERMINAL, DISPOSITIVO, USUARIO, VALOR, VALOR_COMISION, VALOR_GMF, CHEQUE_CODIGO, CHEQUE_CUENTA, CHEQUE_NUMERO"
                                    + "REVERSO, ESTADO, ERROR, TERMINAL_PAIS, TERMINAL_DEPARTAMENTO, TERMINAL_CIUDAD, ORIGEN, TIPO_TERMINAL"
                                    + "DESCRIPCION_RECAUDO, NOMBRE_COMERCIO, PSE_REFERENCIA_1, PSE_REFERENCIA_2"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement sre = coodinConnection.prepareStatement(recibir_escribir);
                            sre.setString( 0, id);
                            sre.setString( 1, fecha_registro);
                            sre.setString( 2, hora_registro);
                            sre.setString( 3, fecha);
                            sre.setString( 4, hora);
                            sre.setString( 5, fecha_contable);
                            sre.setString( 6, operacion);
                            sre.setString( 7, descripcion);
                            sre.setString( 8, secuencia);
                            sre.setString( 9, documento);
                            sre.setString(10, cuenta);
                            sre.setString(11, tipo);
                            sre.setString(12, tipo_ah);
                            sre.setString(13, canal);
                            sre.setString(14, terminal);
                            sre.setString(15, dispositivo);
                            sre.setString(16, usuario);
                            sre.setInt   (17, valor);
                            sre.setInt   (18, valor_comision);
                            sre.setInt   (19, valor_gmf);
                            sre.setString(20, cheque_codigo);
                            sre.setString(21, cheque_cuenta);
                            sre.setString(22, cheque_numero);
                            sre.setString(23, reverso);
                            sre.setString(24, estado);
                            sre.setString(25, error);
                            sre.setString(26, terminal_pais);
                            sre.setString(27, terminal_departamento);
                            sre.setString(28, terminal_ciudad);
                            sre.setString(29, origen);
                            sre.setString(30, tipo_terminal);
                            sre.setString(31, descripcion_recaudo);
                            sre.setString(32, nombre_comercio);
                            sre.setString(33, pse_referencia_1);
                            sre.setString(34, pse_referencia_2);
                            sre.setInt(35, 0);
                            sre.executeUpdate();
                            
                            // Insertar en extracto del cliente
                            /*
                            CODIGOS OPERACION EXTRACTO
                            20 - COMISION CONSULTA DE SALDOS OTRAS REDES
                            21 - RETIRO O PAGO CON TARJETA DEBITO
                            22 - COMISION OPERACIONES DECLINADAS
                            23 - REVERSION PAGOS O RETIROS TARJETA DEBITO
                            24 - REVERSION CONSIGNACION TARJETA DEBITO
                            25 - CONSIGNACION EFECTIVO CON TARJETA DEBITO
                            26 - PAGO SERVICIOS CON TARJETA DEBITO
                            29 - CONSIGNACION EN CHEQUE TARJETA DEBITO
                            30 - REVERSION CONSIGNACION EN CHEQUE TARJETA DEBITO
                            31 - PAGO VIA IVR 
                            32 - PAGO VIA WEB
                            33 - PAGO VIA BANCAMOVIL
                            34 - RETIRO EN EFECTIVO POR OFICINA
                            35 - RETIRO EN CORRESPONSAL BANCARIO
                            36 - REVERSION PAGO VIA IVR
                            37 - REVERSION PAGO VIA WEB
                            38 - REVERSION PAGO VIA BANCAMOVIL
                            39 - REVERSION RETIRO EFECTIVO OFICINA
                            40 - REVERSION RETIRO EFECTIVO CORRESPONSAL BANCARIO
                            50 - CONSIGNACION VIA ATM/POS
                            51 - CONSIGNACION EN EFECTIVO CORRESPONSAL BANCARIO
                            52 - CONSIGNACION EN CHEQUE CORRESPONSAL BANCARIO
                            */
                            // 
                            String insertar_extracto = "INSERT INTO \"cap$extracto\" ("
                                    + "ID_AGENCIA, "
                                    + "ID_TIPO_CAPTACION, "
                                    + "NUMERO_CUENTA, "
                                    + "DIGITO_CUENTA, "
                                    + "FECHA_MOVIMIENTO, "
                                    + "HORA_MOVIMIENTO, "
                                    + "ID_TIPO_MOVIMIENTO, "
                                    + "DOCUMENTO_MOVIMIENTO, "
                                    + "DESCRIPCION_MOVIMIENTO, "
                                    + "VALOR_DEBITO, "
                                    + "VALOR_CREDITO, "
                                    + "ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
                            String cuentaCoodin = cuenta.substring(16);
                            String _agencia = cuentaCoodin.substring(0,1);
                            String _tipo = cuentaCoodin.substring(2,3);
                            String _cuenta = cuentaCoodin.substring(4,10);
                            String _digito = cuentaCoodin.substring(11);
                            Integer _mov = null;
                            Double debito = 0.0;
                            Double credito = 0.0;

                            if (estado == "APROBADA") {
                                PreparedStatement sie = coodinConnection.prepareStatement(insertar_extracto);
                                sie.setInt(0, Integer.valueOf(_agencia));
                                sie.setInt(1, Integer.valueOf(_tipo));
                                sie.setInt(2, Integer.valueOf(_cuenta));
                                sie.setInt(3, Integer.valueOf(_digito));
                                Calendar fechaop = Calendar.getInstance();
                                fechaop.set(Calendar.YEAR, Integer.valueOf(fecha.substring(6,10)));
                                fechaop.set(Calendar.MONTH, Integer.valueOf(fecha.substring(3,4)));
                                fechaop.set(Calendar.DATE, Integer.valueOf(fecha.substring(0,1)));
                                fechaop.set(Calendar.HOUR, Integer.valueOf(hora.substring(0,1)));
                                fechaop.set(Calendar.MINUTE, Integer.valueOf(hora.substring(3,4)));
                                sie.setDate(4, new java.sql.Date(fechaop.getTimeInMillis()));
                                sie.setTime(5, new java.sql.Time(fechaop.getTimeInMillis()));
                                switch (operacion) {
                                    case "DEBITO" : { // RETIRO
                                        switch (canal) {
                                            case "ATM" : _mov = 21;
                                            break;
                                            case "POS" : _mov = 21;
                                            break;
                                            case "IVR" : _mov = 31;
                                            break;
                                            case "WEB" : _mov = 32;
                                            break;
                                            case "MOV" : _mov = 33;
                                            break;
                                            case "OFI" : {
                                                if (cheque_codigo.equals("")) {
                                                    _mov = 53;
                                                } else {
                                                    _mov = 34;
                                                }
                                            }
                                            break;
                                            case "CNB" : {
                                                if (cheque_codigo.equals("")) {
                                                    _mov = 35;
                                                } else {
                                                    _mov = 35;
                                                }
                                            }
                                            break;
                                        }
                                        credito = valor * 1.0 / 100;
                                        break;
                                    } 
                                    case "CREDITO" : { // CONSIGNACION
                                        switch (canal) {
                                            case "ATM" : _mov = 50;
                                            break;
                                            case "POS" : _mov = 50;
                                            break;
                                            case "IVR" : break;
                                            case "WEB" : break;
                                            case "MOV" : break;
                                            case "OFI" : {
                                                if (cheque_codigo.equals("")) {
                                                    _mov = 29;
                                                } else {
                                                    _mov = 25;
                                                }
                                            }
                                            break;
                                            case "CNB" : {
                                                if (cheque_codigo.equals("")) {
                                                    _mov = 51;
                                                } else {
                                                    _mov = 52;
                                                }
                                            }
                                        }
                                        debito = valor * 1.0 / 100;
                                        break;
                                    }
                                }
                                sie.setInt(6, _mov);
                                sie.setString(7, secuencia.substring(36, 50));
                                sie.setString(8, descripcion);
                                sie.setDouble(9, debito);
                                sie.setDouble(10, credito);
                                sie.setInt(11, 0);
                                sie.executeUpdate();
                                
                                
                                debito = 0.0;
                                credito = 0.0;
                                credito = valor_comision * 1.0 / 100;
                                if (credito != 0 ) {
                                    sie = coodinConnection.prepareStatement(insertar_extracto);
                                    sie.setInt(0, Integer.valueOf(_agencia));
                                    sie.setInt(1, Integer.valueOf(_tipo));
                                    sie.setInt(2, Integer.valueOf(_cuenta));
                                    sie.setInt(3, Integer.valueOf(_digito));
                                    sie.setDate(4, new java.sql.Date(fechaop.getTimeInMillis()));
                                    sie.setTime(5, new java.sql.Time(fechaop.getTimeInMillis()));
                                    sie.setInt(6, 55);
                                    sie.setString(7, secuencia.substring(36, 50));
                                    sie.setString(8, descripcion);
                                    sie.setDouble(9, debito);
                                    sie.setDouble(10, credito);
                                    sie.setInt(11, 0);
                                    sie.executeUpdate();
                              }
                            } else {
                                debito = 0.0;
                                credito = 0.0;
                                credito = valor_comision * 1.0 / 100;
                                if (credito != 0 ) {
                                    PreparedStatement sie = coodinConnection.prepareStatement(insertar_extracto);
                                    sie.setInt(0, Integer.valueOf(_agencia));
                                    sie.setInt(1, Integer.valueOf(_tipo));
                                    sie.setInt(2, Integer.valueOf(_cuenta));
                                    sie.setInt(3, Integer.valueOf(_digito));
                                    Calendar fechaop = Calendar.getInstance();
                                    fechaop.set(Calendar.YEAR, Integer.valueOf(fecha.substring(6,10)));
                                    fechaop.set(Calendar.MONTH, Integer.valueOf(fecha.substring(3,4)));
                                    fechaop.set(Calendar.DATE, Integer.valueOf(fecha.substring(0,1)));
                                    fechaop.set(Calendar.HOUR, Integer.valueOf(hora.substring(0,1)));
                                    fechaop.set(Calendar.MINUTE, Integer.valueOf(hora.substring(3,4)));
                                    sie.setDate(4, new java.sql.Date(fechaop.getTimeInMillis()));
                                    sie.setTime(5, new java.sql.Time(fechaop.getTimeInMillis()));
                                    sie.setInt(6, 55);
                                    sie.setString(7, secuencia.substring(36, 50));
                                    sie.setString(8, descripcion);
                                    sie.setDouble(9, debito);
                                    sie.setDouble(10, credito);
                                    sie.setInt(11, 0);
                                    sie.executeUpdate();
                                }
                            }
                            
                            
                            // Borrar recibir
                            String recibir_borrar = "DELETE FROM RECIBIR WHERE ID = ?";
                            PreparedStatement srb = zcoreConnection.prepareStatement(recibir_borrar);
                            srb.setString(0, id);
                            srb.executeUpdate();
                        }
                        
                        // 2 recibir cliente
                        escribirHistorial("Procesando RECIBIR_CLIENTE...");
                        String recibir_cliente_leer = "SELECT * FROM RECIBIR_CLIENTE";
                        PreparedStatement srcl = zcoreConnection.prepareStatement(recibir_cliente_leer);
                        rs = srcl.executeQuery();
                        while (rs.next()) {
                            String id = rs.getString("ID"); // 1
                            String fecha_registro = rs.getString("FECHA_REGISTRO"); // 2
                            String hora_registro = rs.getString("HORA_REGISTRO"); // 3
                            String fecha = rs.getString("FECHA"); // 4
                            String hora = rs.getString("HORA"); // 5
                            String secuencia = rs.getString("SECUENCIA"); // 6
                            String documento = rs.getString("DOCUMENTO"); // 7
                            String documento_tipo = rs.getString("DOCUMENTO_TIPO"); // 8
                            String documento_fecha = rs.getString("DOCUMENTO_FECHA"); // 9
                            String nombre_1 = rs.getString("NOMBRE_1"); // 10
                            String nombre_2 = rs.getString("NOMBRE_2"); // 11
                            String apellido_1 = rs.getString("APELLIDO_1"); // 12
                            String apellido_2 = rs.getString("APELLIDO_2"); // 13
                            String fecha_nacimiento = rs.getString("FECHA_NACIMIENTO"); // 14
                            String sexo = rs.getString("SEXO"); // 15
                            String direccion = rs.getString("DIRECCION"); // 16
                            String telefono = rs.getString("TELEFONO"); // 17
                            String celular = rs.getString("CELULAR"); // 18
                            String correo = rs.getString("CORREO"); // 19
                            String pais = rs.getString("PAIS"); // 20
                            String depto = rs.getString("DEPTO"); // 21
                            String ciudad = rs.getString("CIUDAD"); // 22
                            String pais_residencia = rs.getString("PAIS_RESIDENCIA"); // 23
                            String depto_residencia = rs.getString("DEPTO_RESIDENCIA"); // 24
                            String ciudad_residencia = rs.getString("CIUDAD_RESIDENCIA"); // 25
                            String usuario = rs.getString("USUARIO"); // 26
                            String otra01 = rs.getString("OTRA01"); // 27
                            String empresa = rs.getString("EMPRESA"); // 28
                            String cargo = rs.getString("CARGO"); // 29
                            String ocupacion = rs.getString("OCUPACION"); // 30
                            String admin_rec_public = rs.getString("ADMIN_REC_PUBLIC"); // 31
                            String act_economica = rs.getString("ACT_ECONOMICA"); // 32
                            String observaciones = rs.getString("OBSERVACIONES"); // 33
                            Integer ingresos_mensuales = rs.getInt("INGRESOS_MENSUALES"); // 34
                            Integer otros_ingresos = rs.getInt("OTROS_INGRESOS"); // 35
                            Integer egresos_mensuales = rs.getInt("EGRESOS_MENSUALES"); // 36
                            Integer total_activos = rs.getInt("TOTAL_ACTIVOS"); // 37
                            Integer total_pasivos = rs.getInt("TOTAL_PASIVOS"); // 38
                            
                            String recibir_cliente_escribir = "INSERT INTO RECIBIR_CLIENTE "
                                    + "ID, FECHA_REGISTRO, HORA_REGISTRO, FECHA, HORA, SECUENCIA, DOCUMENTO, DOCUMENTO_TIPO,"
                                    + "DOCUMENTO_FECHA, NOMBRE_1, NOMBRE_2, APELLIDO_1, APELLIDO_2, FECHA_NACIMIENTO, SEXO, DIRECCION,"
                                    + "TELEFONO, CELULAR, CORREO, PAIS, DEPTO, CIUDAD, PAIS_RESIDENCIA, DEPTO_RESIDENCIA, CIUDAD_RESIDENCIA,"
                                    + "USUARIO, OTRA01, EMPRESA, CARGO, OCUPACION, ADMIN_REC_PUBLIC, ACT_ECONOMICA, OBSERVACIONES,"
                                    + "INGRESOS_MENSUALES, OTROS_INGRESOS, EGRESOS_MENSUALES, TOTAL_ACTIVOS, TOTAL_PASIVOS, ES_LEIDO"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement srce = coodinConnection.prepareStatement(recibir_cliente_escribir);
                            srce.setString( 0, id);
                            srce.setString( 1, fecha_registro);
                            srce.setString( 2, hora_registro);
                            srce.setString( 3, fecha);
                            srce.setString( 4, hora);
                            srce.setString( 5, secuencia);
                            srce.setString( 6, documento);
                            srce.setString( 7, documento_tipo);
                            srce.setString( 8, documento_fecha);
                            srce.setString( 9, nombre_1);
                            srce.setString(10, nombre_2);
                            srce.setString(11, apellido_1);
                            srce.setString(12, apellido_2);
                            srce.setString(13, fecha_nacimiento);
                            srce.setString(14, sexo);
                            srce.setString(15, direccion);
                            srce.setString(16, telefono);
                            srce.setString(17, celular);
                            srce.setString(18, correo);
                            srce.setString(19, pais);
                            srce.setString(20, depto);
                            srce.setString(21, ciudad);
                            srce.setString(22, pais_residencia);
                            srce.setString(23, depto_residencia);
                            srce.setString(24, ciudad_residencia);
                            srce.setString(25, usuario);
                            srce.setString(26, otra01);
                            srce.setString(27, empresa);
                            srce.setString(28, cargo);
                            srce.setString(29, ocupacion);
                            srce.setString(30, admin_rec_public);
                            srce.setString(31, act_economica);
                            srce.setString(32, observaciones);
                            srce.setInt(33, ingresos_mensuales);
                            srce.setInt(34, otros_ingresos);
                            srce.setInt(35, egresos_mensuales);
                            srce.setInt(36, total_activos);
                            srce.setInt(37, total_pasivos);
                            srce.setInt(38, 0);
                            srce.executeUpdate();
                        }
                        
                        // 3
                        escribirHistorial("Procesando RECIBIR_EXTERNA...");
                        String recibir_externa_leer = "SELECT * FROM RECIBIR_EXTERNA";
                        PreparedStatement srel = zcoreConnection.prepareStatement(recibir_externa_leer);
                        rs = srel.executeQuery();
                        while (rs.next()){
                            String id = rs.getString("ID");
                            String fecha_registro = rs.getString("FECHA_REGISTRO");
                            String hora_registro = rs.getString("HORA_REGISTRO");
                            String fecha = rs.getString("FECHA");
                            String hora = rs.getString("HORA");
                            String fecha_contable = rs.getString("FECHA_CONTABLE");
                            String operacion = rs.getString("OPERACION");
                            String descripcion = rs.getString("DESCRIPCION");
                            String secuencia = rs.getString("SECUENCIA");
                            String documento = rs.getString("DOCUMENTO");
                            String terminal = rs.getString("TERMINAL");
                            String usuario = rs.getString("USUARIO");
                            Integer valor = rs.getInt("VALOR");
                            Integer valor_comision = rs.getInt("VALOR_COMISION");
                            String estado = rs.getString("ESTADO");
                            String error = rs.getString("ERROR");
                            String cheque_codigo = rs.getString("CHEQUE_CODIGO");
                            Integer cheque_cuenta = rs.getInt("CHEQUE_CUENTA");
                            Integer cheque_numero = rs.getInt("CHEQUE_NUMERO");
                            
                            String recibir_externa_escribir = "INSERT INTO RECIBIR_EXTERNA ("
                                    + "ID, FECHA_REGISTRO, HORA_REGISTRO, FECHA, HORA, FECHA_CONTABLE, OPERACION,"
                                    + "DESCRIPCION, SECUENCIA, DOCUMENTO, TERMINA, USUARIO, VALOR, VALOR_COMISION,"
                                    + "ESTADO, ERROR, CHEQUE_CODIGO, CHEQUE_CUENTA, CHEQUE_NUMERO, ES_LEIDO"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement sree = coodinConnection.prepareStatement(recibir_externa_escribir);
                            sree.setString( 0, id);
                            sree.setString( 1, fecha_registro);
                            sree.setString( 2, hora_registro);
                            sree.setString( 3, fecha);
                            sree.setString( 4, hora);
                            sree.setString( 5, fecha_contable);
                            sree.setString( 6, operacion);
                            sree.setString( 7, descripcion);
                            sree.setString( 8, secuencia);
                            sree.setString( 9, documento);
                            sree.setString(10, terminal);
                            sree.setString(11, usuario);
                            sree.setInt   (12, valor);
                            sree.setInt   (13, valor_comision);
                            sree.setString(14, estado);
                            sree.setString(15, error);
                            sree.setString(16, cheque_codigo);
                            sree.setInt   (17, cheque_cuenta);
                            sree.setInt   (18, cheque_numero);
                            sree.setInt   (19, 0);
                            sree.executeUpdate();
                        }
                        
                        // 4
                        escribirHistorial("Procesando RECIBIR_TARJETA_ESTADO...");
                        String recibir_tarjeta_estado_leer = "SELECT * FROM RECIBIR_TARJETA_ESTADO";
                        PreparedStatement srtel = zcoreConnection.prepareStatement(recibir_tarjeta_estado_leer);
                        rs = srtel.executeQuery();
                        while (rs.next()){
                            String id = rs.getString("ID");
                            String fecha_registro = rs.getString("FECHA_REGISTRO");
                            String hora_registro = rs.getString("HORA_REGISTRO");
                            String fecha = rs.getString("FECHA");
                            String hora = rs.getString("HORA");
                            String tarjeta = rs.getString("TARJETA");
                            String estado = rs.getString("ESTADO");
                            String serial = rs.getString("SERIAL");
                            String usuario = rs.getString("USUARIO");
                            String estado_desc = rs.getString("ESTADO_DESC");
                            
                            String recibir_tarjeta_estado_escribir = "INSERT INTO RECIBIR_TARJETA_ESTADO ("
                                    + "ID, FECHA_REGISTRO, HORA_REGISTRO, FECHA, HORA, TARJETA, ESTADO,"
                                    + "SERIAL, USUARIO, ESTADO_DESC, ES_LEIDO"
                                    + ") VALUES (?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement srtee = coodinConnection.prepareStatement(recibir_tarjeta_estado_escribir);
                            srtee.setString(0, id);
                            srtee.setString(1, fecha_registro);
                            srtee.setString(2, hora_registro);
                            srtee.setString(3, fecha);
                            srtee.setString(4, hora);
                            srtee.setString(5, tarjeta);
                            srtee.setString(6, estado);
                            srtee.setString(7, serial);
                            srtee.setString(8, usuario);
                            srtee.setString(9, estado_desc);
                            srtee.setInt   (10, 0);
                            srtee.executeUpdate();
                        }
                        
                        // 5
                        escribirHistorial("Procesando ENVIAR_CUENTA_ESTADO...");
                        String enviar_cuenta_estado_leer = "SELECT * FROM ENVIAR_CUENTA_ESTADO";
                        PreparedStatement secel = zcoreConnection.prepareStatement(enviar_cuenta_estado_leer);
                        rs = secel.executeQuery();
                        while (rs.next()){
                            String lote = rs.getString("LOTE");
                            Integer consecutivo = rs.getInt("CONSECUTIVO");
                            Integer proceso = rs.getInt("PROCESO");
                            String estado = rs.getString("ESTADO");
                            String error = rs.getString("ERROR");
                            
                            String enviar_cuenta_estado_escribir = "INSERT INTO ENVIAR_CUENTA_ESTADO ("
                                    + "LOTE, CONSECUTIVO, PROCESO, ESTADO, ERROR, FECHA_REGISTRO, ES_LEIDO"
                                    + ") VALUES (?,?,?,?,?,?,?)";
                            PreparedStatement secee = coodinConnection.prepareStatement(enviar_cuenta_estado_escribir);
                            secee.setString( 0, lote);
                            secee.setInt   ( 1, consecutivo);
                            secee.setInt   ( 2, proceso);
                            secee.setString( 3, estado);
                            secee.setString( 4, error);
                            secee.setDate  ( 5, new java.sql.Date(Calendar.getInstance().getTimeInMillis()));
                            secee.setInt   ( 6, 0);
                            secee.executeUpdate();
                        }
                        
                        // 6
                        escribirHistorial("Procesando ENVIAR_TARJETA_ESTADO...");
                        String enviar_tarjeta_estado_leer = "SELECT * FROM ENVIAR_TARJETA_ESTADO";
                        PreparedStatement setel = zcoreConnection.prepareStatement(enviar_tarjeta_estado_leer);
                        rs = setel.executeQuery();
                        while (rs.next()){
                            String lote = rs.getString("LOTE");
                            Integer consecutivo = rs.getInt("CONSECUTIVO");
                            Integer proceso = rs.getInt("PROCESO");
                            String estado = rs.getString("ESTADO");
                            String error = rs.getString("ERROR");
                            
                            String enviar_cuenta_estado_escribir = "INSERT INTO ENVIAR_TARJETA_ESTADO ("
                                    + "LOTE, CONSECUTIVO, PROCESO, ESTADO, ERROR, FECHA_REGISTRO, ES_LEIDO"
                                    + ")VALUES (?,?,?,?,?,?,?)";
                            PreparedStatement secee = coodinConnection.prepareStatement(enviar_cuenta_estado_escribir);
                            secee.setString( 0, lote);
                            secee.setInt   ( 1, consecutivo);
                            secee.setInt   ( 2, proceso);
                            secee.setString( 3, estado);
                            secee.setString( 4, error);
                            secee.setDate  ( 5, new java.sql.Date(Calendar.getInstance().getTimeInMillis()));
                            secee.setInt   ( 6, 0);
                            secee.executeUpdate();
                        }                        
                        
                        // 7
                        escribirHistorial("Procesando ENVIAR_TARJETA_CUENTA_ESTADO...");
                        String enviar_tarjeta_cuenta_estado_leer = "SELECT * FROM ENVIAR_TARJETA_CUENTA_ESTADO";
                        PreparedStatement setcel = zcoreConnection.prepareStatement(enviar_tarjeta_cuenta_estado_leer);
                        rs = setcel.executeQuery();
                        while (rs.next()){
                            String lote = rs.getString("LOTE");
                            Integer consecutivo = rs.getInt("CONSECUTIVO");
                            Integer proceso = rs.getInt("PROCESO");
                            String estado = rs.getString("ESTADO");
                            String error = rs.getString("ERROR");
                            
                            String enviar_tarjeta_cuenta_estado_escribir = "INSERT INTO ENVIAR_TARJETA_CUENTA_ESTADO ("
                                    + "LOTE, CONSECUTIVO, PROCESO, ESTADO, ERROR, FECHA_REGISTRO, ES_LEIDO"
                                    + ") VALUES (?,?,?,?,?,?,?)";
                            PreparedStatement secee = coodinConnection.prepareStatement(enviar_tarjeta_cuenta_estado_escribir);
                            secee.setString( 0, lote);
                            secee.setInt   ( 1, consecutivo);
                            secee.setInt   ( 2, proceso);
                            secee.setString( 3, estado);
                            secee.setString( 4, error);
                            secee.setDate  ( 5, new java.sql.Date(Calendar.getInstance().getTimeInMillis()));
                            secee.setInt   ( 6, 0);
                            secee.executeUpdate();
                        }                        
                        
                        // 8
                        /*
                        String conciliacion_leer = "SELECT * FROM CONCILIACION";
                        PreparedStatement scl = zcoreConnection.prepareStatement(conciliacion_leer);
                        rs = scl.executeQuery();
                        while (rs.next()){
                            String fecha = rs.getString("FECHA");
                            String hora  = rs.getString("HORA");
                            String fecha_contable = rs.getString("FECHA_CONTABLE");
                            String descripcion = rs.getString("DESCRIPCION");
                            String secuencia = rs.getString("SECUENCIA");
                            String documento = rs.getString("DOCUMENTO");
                            String cuenta = rs.getString("CUENTA");
                            String tipo = rs.getString("TIPO");
                            String canal = rs.getString("CANAL");
                            String terminal = rs.getString("TERMINAL");
                            String dispositivo = rs.getString("DISPOSITIVO");
                            String usuario = rs.getString("USUARIO");
                            Integer valor = rs.getInt("VALOR");
                            Integer valor_comision = rs.getInt("VALOR_comision");
                            String estado = rs.getString("ESTADO");
                            String error = rs.getString("ERROR");
                            String gratis_interna = rs.getString("GRATIS_INTERNA");
                            String gratis_externa = rs.getString("GRATIS_EXTERNA");
                            String entidad_deudora = rs.getString("ENTIDAD_DEUDORA");
                            String entidad_acreedora = rs.getString("ENTIDAD_ACREEDORA");
                            String incosistente = rs.getString("INCONSISTENTE");
                            Integer comision_redes = rs.getInt("COMISION_REDES");
                            Integer enrutamiento_redes = rs.getInt("ENRUTAMIENTO_REDES");
                            Integer comision_visionamos = rs.getInt("COMISION_VISIONAMOS");
                            Integer comision_intercooperativa = rs.getInt("COMISION_INTERCOOPERATIVA");
                            String origen = rs.getString("ORIGEN");
                            String tipo_de_terminal = rs.getString("TIPO_DE_TERMINAL");
                            String entidad_duena_cuenta = rs.getString("ENTIDAD_DUENA_CUENTA");
                            String entidad_duena_cuenta_destino = rs.getString("ENTIDAD_DUENA_CUENTA_DESTINO");
                            String entidad_duena_dispositiva = rs.getString("ENTIDAD_DUENA_DISPOSITIVA");
                            
                            
                            String conciliacion_escribir = "INSERT INTO CONCILIACION VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement sce = coodinConnection.prepareStatement(conciliacion_escribir);
                            sce.setString(  0, fecha);
                            sce.setString(  1, hora);
                            sce.setDate  ( 30, new java.sql.Date(Calendar.getInstance().getTimeInMillis()));
                            sce.setInt   ( 31, 0);
                            sce.executeUpdate();
                            
                        }                        
                        */
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        Timer timer2 = new Timer();
        // Dentro de 0 milisegundos avísame cada 1000 milisegundos 
        timer2.scheduleAtFixedRate(timerTask2, 0, 60000);
    }
}
